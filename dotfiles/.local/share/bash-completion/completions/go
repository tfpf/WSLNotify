# Takes no arguments.
_go_bug_completer()
{
    COMPREPLY=()
}

# Takes options and package names. If an option requires a value, try to
# complete the value if possible (otherwise, do not complete it). If it does
# not require a value, complete with options if the current word starts with a
# hyphen, else fall back to normal completion. This pattern will be used in
# several functions.
_go_build_completer()
{
    local options="-a -asan -asmflags -buildmode -buildvcs -compiler -gccgoflags -gcflags -installsuffix -ldflags -linkshared -mod -modcacherw -modfile -msan -n -overlay -p -pkgdir -race -tags -toolexec -trimpath -v -work -x"
    case $_GO_COMPLETER_PREVIOUS in
        (-buildmode) COMPREPLY=($(compgen -W "archive c-archive c-shared default exe pie plugin shared" -- $_GO_COMPLETER_CURRENT));;
        (-compiler) COMPREPLY=($(compgen -W "gc gccgo" -- $_GO_COMPLETER_CURRENT));;
        (-mod) COMPREPLY=($(compgen -W "mod readonly vendor" -- $_GO_COMPLETER_CURRENT));;
        (-overlay) compopt -o default;;
        (-pkgdir) compopt -o dirnames;;
        (-asmflags | -gccgoflags | -gcflags | -installsuffix | -ldflags | -modfile | -p | -tags | -toolexec) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes options and package names. TODO Complete `go build` options which are
# supported.
_go_clean_completer()
{
    local options="-cache -fuzzcache -i -modcache -n -r -testcache -x"
    case $_GO_COMPLETER_CURRENT in
        (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
        (*) compopt -o default;;
    esac
}

# Takes options and package/symbol/field names.
_go_doc_completer()
{
    local options="-all -c -cmd -short -src -u"
    case $_GO_COMPLETER_CURRENT in
        (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
        (*) compopt -o default;;
    esac
}

# Takes options. Each option may have multiple values; values may be present
# without options. The option should be specified immediately after `go env`
# for correct results, but the command does not check this, so I won't enforce
# it.
_go_env_completer()
{
    local options="-json -u -w"
    local values=$(go env | awk -F = '{print $1}')
    case $_GO_COMPLETER_CURRENT in
        (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
        (*) COMPREPLY=($(compgen -W "$values" -- $_GO_COMPLETER_CURRENT));;
    esac
}

# Takes one option and package names. The option requires a value.
_go_fix_completer()
{
    local options="-fix"
    case $_GO_COMPLETER_PREVIOUS in
        (-fix) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes options and package names.
_go_fmt_completer()
{
    local options="-mod -n -x"
    case $_GO_COMPLETER_PREVIOUS in
        (-mod) COMPREPLY=($(compgen -W "readonly vendor" -- $_GO_COMPLETER_CURRENT));;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes options and file/package names. TODO Complete `go build` options which
# are supported.
_go_generate_completer()
{
    local options="-n -run -v -x"
    case $_GO_COMPLETER_PREVIOUS in
        (-run) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes options and package names. The packages are downloaded, so do not fall
# back to normal completion. TODO Complete `go build` options which are
# supported.
_go_get_completer()
{
    local options="-t -u -x"
    COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT))
}

# Takes only one more argument (which should one of the Go subcommands other
# than `help`, or one of the Go help topics) or two if the first of those two
# is `mod` or `work`.
_go_help_completer()
{
    if [ $COMP_CWORD -eq 2 ]
    then
        local subcommands="bug build clean doc env fix fmt generate get install list mod work run test tool version vet"
        local topics="buildconstraint buildmode c cache environment filetype go.mod gopath gopath-get goproxy importpath modules module-get module-auth packages private testflag testfunc vcs"
        local wordlist="$subcommands $topics"
        COMPREPLY=($(compgen -W "$wordlist" -- $_GO_COMPLETER_CURRENT))
    elif [ $COMP_CWORD -eq 3 ]
    then
        case ${COMP_WORDS[2]} in
            (mod) COMPREPLY=($(compgen -W "download edit graph init tidy vendor verify why" -- $_GO_COMPLETER_CURRENT));;
            (work) COMPREPLY=($(compgen -W "edit init sync use" -- $_GO_COMPLETER_CURRENT));;
            (*) COMPREPLY=();;
        esac
    else
        COMPREPLY=()
    fi
}

# Takes options and package names. TODO Complete `go build` options which are
# supported.
_go_install_completer()
{
    compopt -o default
}

# Takes options and package/module names. TODO Complete `go build` options
# which are supported.
_go_list_completer()
{
    local options="-compiled -deps -e -export -f -find -json -m -modfile -retracted -test -u -versions"
    case $_GO_COMPLETER_PREVIOUS in
        (-f) COMPREPLY=();;
        (-modfile) compopt -o default;;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes options and module names. The modules are downloaded, so do not fall
# back to normal completion.
_go_mod_download_completer()
{
    local options="-json -x"
    COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT))
}

# Takes options and a file name (`go.mod`).
_go_mod_edit_completer()
{
    local options="-dropexclude -dropreplace -droprequire -dropretract -exclude -fmt -go -json -module -print -replace -require -retract"
    case $_GO_COMPLETER_PREVIOUS in
        (-dropexclude | -dropreplace | -droprequire | -dropretract | -exclude | -go | -replace | -require | -retract) COMPREPLY=();;
        (-module) compopt -o default;;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes one option. The option requires a value.
_go_mod_graph_completer()
{
    local options="-go"
    case $_GO_COMPLETER_PREVIOUS in
        (-go) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) COMPREPLY=();;
            esac;;
    esac
}

# Takes a module path.
_go_mod_init_completer()
{
    compopt -o default
}

# Takes options.
_go_mod_tidy_completer()
{
    local options="-compat -e -go -v"
    case $_GO_COMPLETER_PREVIOUS in
        (-go | -compat) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) COMPREPLY=();;
            esac;;
    esac
}

# Takes options.
_go_mod_vendor_completer()
{
    local options="-e -o -v"
    case $_GO_COMPLETER_PREVIOUS in
        (-o) compopt -o dirnames;;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) COMPREPLY=();;
            esac;;
    esac
}

# Takes no arguments.
_go_mod_verify_completer()
{
    COMPREPLY=()
}

# Takes options and package names. The packages are paths (similar to those
# passed to `go mod download`, so do not fall back to normal completion.
_go_mod_why_completer()
{
    local options="-m -vendor"
    COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT))
}

# Takes subsubcommands, which take arguments.
_go_mod_completer()
{
    if [ $COMP_CWORD -eq 2 ]
    then
        COMPREPLY=($(compgen -W "download edit graph init tidy vendor verify why" $_GO_COMPLETER_CURRENT))
        return
    fi
    case ${COMP_WORDS[2]} in
        (download) _go_mod_download_completer;;
        (edit) _go_mod_edit_completer;;
        (graph) _go_mod_graph_completer;;
        (init) _go_mod_init_completer;;
        (tidy) _go_mod_tidy_completer;;
        (vendor) _go_mod_vendor_completer;;
        (verify) _go_mod_verify_completer;;
        (why) _go_mod_why_completer;;
        (*) COMPREPLY=();;
    esac
}

# Takes options and a package name. The options must come before the package
# name (arguments specified after the latter are treated as those of the binary
# to run). However, there is no way to know if the package name has already
# been specified, so keep it simple. TODO Complete `go build` options which are
# supported.
_go_run_completer()
{
    local options="-exec"
    case $_GO_COMPLETER_PREVIOUS in
        (-exec) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac
    esac
}

# Takes options and package names. TODO Complete `go build` options which are
# supported.
_go_test_completer()
{
    local options="-args -bench -benchmem -benchtime -blockprofile -blockprofilerate -c -count -cover -covermode -coverpkg -coverprofile -cpu -cpuprofile -exec -failfast -fuzz -fuzzminimizetime -fuzztime -json -list -memprofile -memprofilerate -mutexprofile -mutexprofilefraction -o -outputdir -parallel -run -short -shuffle -timeout -trace -v -vet"
    case $_GO_COMPLETER_PREVIOUS in
        (-covermode) COMPREPLY=($(compgen -W "atomic count set" -- $_GO_COMPLETER_CURRENT));;
        (-o) compopt -o default;;
        (-shuffle) COMPREPLY=($(compgen -W "off on" -- $_GO_COMPLETER_CURRENT));;
        (-blockprofile | -coverprofile | -cpuprofile | -memprofile | -mutexprofile | -trace) compopt -o default;;
        (-outputdir) compopt -o dirnames;;
        (-args | -bench | -benchtime | -blockprofilerate | -count | -coverpkg | -cpu | -exec | -fuzz | -fuzzminimizetime | -fuzztime | -list | -memprofilerate | -mutexprofilefraction | -parallel | -run | -timeout | -vet) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac
    esac
}

# Takes options. Each option requires a value; values may be present without
# options.
_go_version_completer()
{
    local options="-m -v"
    case $_GO_COMPLETER_CURRENT in
        (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
        (*) compopt -o default;;
    esac
}

# Takes options and a file name (`go.work`).
_go_work_edit_completer()
{
    local options="-dropreplace -dropuse -fmt -go -json -print -replace -use"
    case $_GO_COMPLETER_PREVIOUS in
        (-dropreplace | -dropuse | -go | -replace | -use) COMPREPLY=();;
        (*) case $_GO_COMPLETER_CURRENT in
                (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
                (*) compopt -o default;;
            esac;;
    esac
}

# Takes a module directory.
_go_work_init_completer()
{
    compopt -o dirnames
}

# Takes no arguments.
_go_work_sync_completer()
{
    COMPREPLY=()
}

# Takes options and module directories.
_go_work_use_completer()
{
    local options="-r"
    case $_GO_COMPLETER_CURRENT in
        (-*) COMPREPLY=($(compgen -W "$options" -- $_GO_COMPLETER_CURRENT));;
        (*) compopt -o dirnames;;
    esac
}

# Takes subsubcommands, which take arguments.
_go_work_completer()
{
    if [ $COMP_CWORD -eq 2 ]
    then
        COMPREPLY=($(compgen -W "edit init sync use" $_GO_COMPLETER_CURRENT))
        return
    fi
    case ${COMP_WORDS[2]} in
        (edit) _go_work_edit_completer;;
        (init) _go_work_init_completer;;
        (sync) _go_work_sync_completer;;
        (use) _go_work_use_completer;;
        (*) COMPREPLY=();;
    esac
}

# Programmable completion script for Go 1.18.1.
_go_completer()
{
    _GO_COMPLETER_CURRENT=$2
    _GO_COMPLETER_PREVIOUS=$3
    local cmd=${COMP_WORDS[1]}

    if [ $COMP_CWORD -eq 1 ]
    then
        local subcommands="bug build clean doc env fix fmt generate get help install list mod run test tool version vet work"
        COMPREPLY=($(compgen -W "$subcommands" -- $_GO_COMPLETER_CURRENT))
        unset _GO_COMPLETER_CURRENT _GO_COMPLETER_PREVIOUS
        return
    fi

    case $cmd in
        (bug) _go_bug_completer;;
        (build) _go_build_completer;;
        (clean) _go_clean_completer;;
        (doc) _go_doc_completer;;
        (env) _go_env_completer;;
        (fix) _go_fix_completer;;
        (fmt) _go_fmt_completer;;
        (generate) _go_generate_completer;;
        (get) _go_get_completer;;
        (help) _go_help_completer;;
        (install) _go_install_completer;;
        (list) _go_list_completer;;
        (mod) _go_mod_completer;;
        (run) _go_run_completer;;
        (test) _go_test_completer;;
        (version) _go_version_completer;;
        (work) _go_work_completer;;
        (*) COMPREPLY=();;
    esac
    unset _GO_COMPLETER_CURRENT _GO_COMPLETER_PREVIOUS
}

complete -F _go_completer go
